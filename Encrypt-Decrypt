#menu function

def display_menu():
    print("""
            1. Enter encryption/decryption key
            2. Encrypt a message
            3. Decrypt a message
            4. Exit
            """)
    while True:
        cmd = input('Type an option: ')
        if cmd in ['1', '2', '3', '4']:
            break
        else:
            print('Enter a valid option')
          
    if cmd == '1':
        key = int(input("Enter encryption/decryption key: "))
    elif cmd == '2':
        key = int(input("Enter encryption/decryption key: "))
        msg = input("Which message do you want to encrypt: ").lower()
        encryption = EncryptDecrypt(key, msg)
        print(encryption.encrypt())
    elif cmd == '3':
        key = int(input("Enter encryption/decryption key: "))
        msg = input("Which message do you want to decrypt: ").lower()
        decryption = EncryptDecrypt(key, msg)
        print(decryption.decrypt())
    elif cmd == '4':
        pass

#creating a class to encrypt and decrypt message
    
class EncryptDecrypt:
    def __init__(self, encr_decr_key, message):
        self.encr_decr_key = encr_decr_key
        self.message = message

    @property
    def encr_decr_key(self):
        return self._encr_decr_key

    @encr_decr_key.setter
    def encr_decr_key(self, value):
        if int(value) > 1 and int(value) < 26:
            self._encr_decr_key = value
        else:
            raise ValueError("Value must be in 1 to 26")

    #method to encrypt a message
        
    def encrypt(self):
        self.alphabet = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}
        self.alphabet_reverse = {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f', 7: 'g', 8: 'h', 9: 'i', 10: 'j', 11: 'k', 12: 'l', 13: 'm', 14: 'n', 15: 'o', 16: 'p', 17: 'q', 18: 'r', 19: 's', 20: 't', 21: 'u', 22: 'v', 23: 'w', 24: 'x', 25: 'y', 26: 'z'}
        
        self.lst_indx = []
        if self.message.isspace() == True:
            self.words = self.message.split()
            for self.word in self.words:
                for self.char in self.word:
                    for self.key, self.value in self.alphabet.items():
                        self.lst_indx.append(self.value)
        else:
            for self.char in self.message:
                for self.key, self.value in self.alphabet.items():
                    if self.char == self.key:
                        self.lst_indx.append(self.value)
                if self.char == ' ':
                    self.lst_indx.append(0)

        self.lst_indx_new = []
        for self.i in self.lst_indx:
            if self.i == 0:
                self.j = self.i
                self.lst_indx_new.append(self.j)
            else: 
                self.j = self.i + self._encr_decr_key
                if self.j > 26:
                    self.j = self.j - 26
                    self.lst_indx_new.append(self.j)
                else:
                    self.lst_indx_new.append(self.j)

        self.new_msg = []
        for self.i in self.lst_indx_new:
            for self.key, self.value in self.alphabet_reverse.items():
                if self.i == self.key:
                    self.new_msg.append(self.value)
            if self.i == 0:
                self.new_msg.append(' ')

        self.ready_msg = ''
        for self.char in self.new_msg:
            self.ready_msg += self.char

        return self.ready_msg

    #method to decrypt a message
    
    def decrypt(self):
        self.alphabet = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}
        self.alphabet_reverse = {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f', 7: 'g', 8: 'h', 9: 'i', 10: 'j', 11: 'k', 12: 'l', 13: 'm', 14: 'n', 15: 'o', 16: 'p', 17: 'q', 18: 'r', 19: 's', 20: 't', 21: 'u', 22: 'v', 23: 'w', 24: 'x', 25: 'y', 26: 'z'}
        
        self.lst_indx = []
        if self.message.isspace() == True:
            self.words = self.message.split()
            for self.word in self.words:
                for self.char in self.word:
                    for self.key, self.value in self.alphabet.items():
                        self.lst_indx.append(self.value)
        else:
            for self.char in self.message:
                for self.key, self.value in self.alphabet.items():
                    if self.char == self.key:
                        self.lst_indx.append(self.value)
                if self.char == ' ':
                    self.lst_indx.append(0)

        self.lst_indx_new = []
        for self.i in self.lst_indx:
            if self.i == 0:
                self.j = self.i
                self.lst_indx_new.append(self.j)
            else: 
                self.j = self.i - self._encr_decr_key
                if self.j < 1:
                    self.j = self.j + 27
                    self.lst_indx_new.append(self.j)
                else:
                    self.lst_indx_new.append(self.j)
                
        self.new_msg = []
        for self.i in self.lst_indx_new:
            for self.key, self.value in self.alphabet_reverse.items():
                if self.i == self.key:
                    self.new_msg.append(self.value)
            if self.i == 0:
                self.new_msg.append(' ')

                    
        self.ready_msg = ''
        for self.char in self.new_msg:
            self.ready_msg += self.char

        return self.ready_msg

#main program
    
display_menu()
